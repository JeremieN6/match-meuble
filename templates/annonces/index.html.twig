{% extends 'base.html.twig' %}

{% block title %}MatchMeuble | Annonces (Offres & Demandes){% endblock %}

{% block body %}
<section class="bg-surface-50 dark:bg-gray-900 py-10 lg:py-14">
  <div class="max-w-screen-xl mx-auto px-4">
    <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-6 mb-8">
      <div>
        <h1 class="text-3xl font-extrabold text-gray-900 dark:text-white">Annonces</h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">Parcourez toutes les offres et demandes de montage de meuble.</p>
      </div>
      <!-- Filtres -->
      <div class="flex flex-wrap items-center gap-3">
        <select id="filter-type" class="rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500">
          <option value="all" {{ filters.type is empty or filters.type == 'all' ? 'selected' : '' }}>Tous les types</option>
          <option value="offre" {{ filters.type == 'offre' ? 'selected' : '' }}>Offres</option>
          <option value="demande" {{ filters.type == 'demande' ? 'selected' : '' }}>Demandes</option>
        </select>
        <select id="filter-status" class="rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500">
          <option value="all" {{ filters.status is empty ? 'selected' : '' }}>Tous statuts</option>
          <option value="Libre" {{ filters.status == 'Libre' ? 'selected' : '' }}>Libre</option>
          <option value="En cours" {{ filters.status == 'En cours' ? 'selected' : '' }}>En cours</option>
          <option value="Terminée" {{ filters.status == 'Terminée' ? 'selected' : '' }}>Terminée</option>
        </select>
        <select id="sort-by" class="rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500">
          <option value="date_desc">Plus récentes</option>
          <option value="date_asc">Plus anciennes</option>
          <option value="amount_desc">Budget décroissant</option>
          <option value="amount_asc">Budget croissant</option>
        </select>
        <input id="filter-q" value="{{ filters.q }}" type="search" placeholder="Rechercher..." class="rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500" />
        <input id="filter-min" value="{{ filters.min ?? '' }}" type="number" min="0" placeholder="Prix min" class="w-28 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500" />
        <input id="filter-max" value="{{ filters.max ?? '' }}" type="number" min="0" placeholder="Prix max" class="w-28 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm px-3 py-2 focus:outline-none focus:ring-primary-500 focus:border-primary-500" />
        <button id="filter-reset" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700">Réinitialiser</button>
      </div>
    </div>

    <div id="cards-grid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {% for card in cards %}
  <div class="max-w-sm bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700 card-item" data-type="{{ card.type }}" data-title="{{ card.title|lower }}" data-desc="{{ card.description|lower }}" data-localisation="{{ (card.localisation ?? '')|lower }}" data-status="{{ (card.status ?? '')|lower }}" data-created="{{ card.created }}" data-amount="{{ card.amount ?? 0 }}">
        <a href="{{ card.href }}">
          <img class="rounded-t-lg w-full h-44 object-cover" src="{{ card.image }}" alt="" />
        </a>
        <div class="p-5">
          <div class="flex items-center justify-between gap-2">
            <a href="{{ card.href }}" class="min-w-0 flex-1">
              <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white line-clamp-1">{{ card.title }}</h5>
            </a>
            {% if card.type == 'offre' and card.status %}
              <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">{{ card.status }}</span>
            {% endif %}
          </div>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400 line-clamp-3">{{ card.description }}</p>
          <div class="flex items-center gap-2">
            <a href="{{ card.href }}" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-primary-700 rounded-lg hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700">
              {{ card.cta }}
              <svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
              </svg>
            </a>
            <button class="fav-btn inline-flex items-center px-3 py-2 text-sm font-medium text-primary-700 bg-primary-50 border border-primary-200 rounded-lg hover:bg-primary-100 dark:text-primary-300 dark:bg-primary-900/20 dark:border-primary-900" data-url="{{ card.favUrl }}" data-csrf="{{ card.favToken }}">
              Enregistrer
            </button>
          </div>
        </div>
      </div>
      {% endfor %}
    </div>
  </div>
</section>

{% block javascripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', () => {
  const typeSel = document.getElementById('filter-type');
  const statusSel = document.getElementById('filter-status');
  const qInput = document.getElementById('filter-q');
  const minInput = document.getElementById('filter-min');
  const maxInput = document.getElementById('filter-max');
      const sortSel = document.getElementById('sort-by');
      const resetBtn = document.getElementById('filter-reset');
      const items = Array.from(document.querySelectorAll('.card-item'));

      function applyFilters() {
        const type = typeSel.value;
        const status = statusSel.value.toLowerCase();
        const q = (qInput.value || '').trim().toLowerCase();
        const min = parseInt(minInput.value || '');
        const max = parseInt(maxInput.value || '');

        items.forEach(el => {
          const matchesType = type === 'all' || el.dataset.type === type;
          const matchesStatus = status === 'all' || el.dataset.status === status;
          const haystack = `${el.dataset.title} ${el.dataset.desc} ${el.dataset.localisation}`;
          const matchesQuery = q === '' || haystack.includes(q);
          const amount = parseInt(el.dataset.amount || '0');
          const matchesMin = isNaN(min) || amount >= min;
          const matchesMax = isNaN(max) || amount <= max;
          el.style.display = (matchesType && matchesStatus && matchesQuery && matchesMin && matchesMax) ? '' : 'none';
        });

        const visible = items.filter(el => el.style.display !== 'none');
        const sort = sortSel.value;
        visible.sort((a, b) => {
          if (sort === 'date_desc') return (parseInt(b.dataset.created) || 0) - (parseInt(a.dataset.created) || 0);
          if (sort === 'date_asc') return (parseInt(a.dataset.created) || 0) - (parseInt(b.dataset.created) || 0);
          if (sort === 'amount_desc') return (parseInt(b.dataset.amount) || 0) - (parseInt(a.dataset.amount) || 0);
          if (sort === 'amount_asc') return (parseInt(a.dataset.amount) || 0) - (parseInt(b.dataset.amount) || 0);
          return 0;
        });
        const grid = document.getElementById('cards-grid');
        visible.forEach(el => grid.appendChild(el));
      }

      typeSel.addEventListener('change', applyFilters);
      statusSel.addEventListener('change', applyFilters);
      qInput.addEventListener('input', applyFilters);
      minInput.addEventListener('input', applyFilters);
      maxInput.addEventListener('input', applyFilters);
      sortSel.addEventListener('change', applyFilters);
      resetBtn.addEventListener('click', () => {
        typeSel.value = 'all';
        statusSel.value = 'all';
        qInput.value = '';
        minInput.value = '';
        maxInput.value = '';
        sortSel.value = 'date_desc';
        applyFilters();
      });

      applyFilters();

      document.querySelectorAll('.fav-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.preventDefault();
          const url = btn.dataset.url;
          const csrf = btn.dataset.csrf;
          const res = await fetch(url, { method: 'POST', headers: { 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': csrf } });
          const data = await res.json();
          btn.textContent = data.favori ? 'Enregistré' : 'Enregistrer';
        });
      });
    });
  </script>
  <script>
    // Pagination controls (minimal)
    document.addEventListener('DOMContentLoaded', () => {
      const pag = document.getElementById('pagination-controls');
      if (!pag) return;
      pag.addEventListener('click', (e) => {
        const target = e.target.closest('a[data-page]');
        if (!target) return;
        e.preventDefault();
        const page = target.getAttribute('data-page');
        const params = new URLSearchParams(window.location.search);
        params.set('page', page);
        window.location.search = params.toString();
      });
    });
  </script>
{% endblock %}
{% endblock %}

{% if pagination %}
  <div class="max-w-screen-xl mx-auto px-4 pb-10">
    {{ knp_pagination_render(pagination) }}
  </div>
{% else %}
  <div id="pagination-controls" class="max-w-screen-xl mx-auto px-4 pb-10 flex items-center justify-center gap-4">
    {% if page > 1 %}
      <a href="#" data-page="{{ page - 1 }}" class="px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700">Précédent</a>
    {% endif %}
    <span class="text-sm text-gray-600 dark:text-gray-400">Page {{ page }}</span>
    {% if hasMore %}
      <a href="#" data-page="{{ page + 1 }}" class="px-3 py-2 text-sm rounded border border-gray-300 dark:border-gray-700">Suivant</a>
    {% endif %}
  </div>
{% endif %}
